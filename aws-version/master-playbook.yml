---
- hosts: k8s_master
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - jq

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: Add "ubuntu" user to docker group
    user:
      name: ubuntu
      group: docker

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl
        - etcd-client

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ inventory_hostname }}
      create: yes

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Initialize the Kubernetes cluster using kubeadm
    become: yes
    command: kubeadm init

  - name: Setup kubeconfig for "ubuntu" user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/ubuntu/.kube
     - sudo cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
     - chown ubuntu:ubuntu /home/ubuntu/.kube/config

  - name: Install weave network
    become: false
    shell: kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Printing join command
    ansible.builtin.debug:
      msg: "{{ join_command.stdout_lines[0] }}"

  - name: Copy join command to local file
    become: false
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="/tmp/join-command"

  - name: Install metrics-server
    become: false
    shell: |
      kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
      wget -c https://gist.githubusercontent.com/initcron/1a2bd25353e1faa22a0ad41ad1c01b62/raw/008e23f9fbf4d7e2cf79df1dd008de2f1db62a10/k8s-metrics-server.patch.yaml
      kubectl patch deploy metrics-server -p "$(cat k8s-metrics-server.patch.yaml)" -n kube-system

  - name: Copy deployment files
    become: false
    copy:
      src: ./kube-deploy
      dest: ./

  - name: Deploy application
    become: false
    shell: |
     cd $(pwd)/kube-deploy
     kubectl apply -k ./

  - name: Create Custom Roles and Service Account
    become: false
    shell: |
      kubectl create clusterrole custom-cluster-role --verb=list --verb=get --verb=watch --verb=update --verb=delete --verb=create  --resource=pods 
      kubectl create serviceaccount custom-service-account
      kubectl create clusterrolebinding custom-clusterrole-binding --clusterrole=custom-cluster-role --serviceaccount=default:custom-service-account

  handlers:
    - name: docker status
      service: name=docker state=started

